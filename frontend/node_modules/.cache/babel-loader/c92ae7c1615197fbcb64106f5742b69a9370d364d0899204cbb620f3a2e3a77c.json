{"ast":null,"code":"var _jsxFileName = \"/Users/ywang/Desktop/fiber_monitor_display/frontend/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport \"./Map.css\";\nimport { useRef, useState, useEffect } from 'react';\nimport Map, { NavigationControl, Source, Layer } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from './Const';\nimport GeocoderControl from './GeocoderControl';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer, routeLayer } from './layers';\nimport EventInfo from \"./EventInfo\";\nimport useFetch from \"../Api/Api\";\nimport { Spin } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BACKEND_SERVER = \"http://localhost:5000/\";\nfunction Mapbox() {\n  _s();\n  const mapRef = useRef(null);\n  const [popupInfo, setPopupInfo] = useState(null);\n  const mapLoadingRef = useRef(true);\n  const {\n    data: routeData,\n    loading: routeLoading,\n    error: routeFetchError\n  } = useFetch(BACKEND_SERVER + 'routes');\n  const routeGeojson = useRef(null);\n  // if (!routeLoading) {\n  //   console.log('load complete')\n  //   console.log(routeData)\n  //   if (routeData.success) {\n  //     routeGeojson.current = routeData.res.map((route) => {\n  //       return {\n  //         \"type\": \"FeatureCollection\",\n  //         \"features\": [{\n  //           \"type\": \"Feature\",\n  //           \"properties\": {\n  //             \"name\": route.name,\n  //           },\n  //           \"geometry\": route.geometry\n  //         }]\n  //       }\n  //     })\n  //   }\n  // }\n\n  useEffect(() => {\n    mapLoadingRef.current = routeLoading;\n    if (!routeLoading) {\n      console.log('load complete');\n      console.log(routeData);\n      console.log(routeData.success);\n      // if (routeData.success) {\n      //   routeGeojson.current = routeData.res.map((route) => {\n      //     return {\n      //       \"type\": \"FeatureCollection\",\n      //       \"features\": [{\n      //         \"type\": \"Feature\",\n      //         \"properties\": {\n      //           \"name\": route.name,\n      //         },\n      //         \"geometry\": route.geometry\n      //       }]\n      //     }\n      //   })\n      // }\n    }\n  }, [routeLoading, routeData]);\n  const onClick = event => {\n    const feature = event.features[0];\n    if (!feature) {\n      return;\n    }\n    if (feature.layer.id === 'clusters') {\n      const clusterId = feature.properties.cluster_id;\n      mapRef.current.getSource('event').getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n        mapRef.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom,\n          duration: 500\n        });\n      });\n    }\n    if (feature.layer.id === 'unclustered-point') {\n      console.log('point:', feature);\n      const coordinates = feature.geometry.coordinates.slice();\n      setPopupInfo({\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        properties: feature.properties\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [mapLoadingRef.current && /*#__PURE__*/_jsxDEV(Spin, {\n      tip: \"Loading\",\n      size: \"large\",\n      className: \"spin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), !mapLoadingRef.current && /*#__PURE__*/_jsxDEV(Map, {\n      initialViewState: {\n        longitude: -74.6,\n        latitude: 40.4,\n        zoom: 10\n      },\n      mapboxAccessToken: MAPBOX_TOKEN,\n      style: {\n        position: \"absolute\",\n        width: \"100%\",\n        top: 0,\n        bottom: 0\n      },\n      mapStyle: \"mapbox://styles/mapbox/streets-v12\",\n      onClick: onClick,\n      ref: mapRef,\n      interactiveLayerIds: [clusterLayer.id, unclusteredPointLayer.id],\n      children: [/*#__PURE__*/_jsxDEV(NavigationControl, {\n        position: \"top-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GeocoderControl, {\n        position: \"top-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"event\",\n        type: \"geojson\"\n        // data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n        ,\n        data: \"./data/sample.geojson\",\n        cluster: true,\n        clusterMaxZoom: 14,\n        clusterRadius: 50,\n        children: [/*#__PURE__*/_jsxDEV(Layer, {\n          ...clusterLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          ...clusterCountLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          ...unclusteredPointLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"route\",\n        type: \"geojson\",\n        data: routeGeojson\n        // data=\"./data/route.geojson\"\n        ,\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          ...routeLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), popupInfo && /*#__PURE__*/_jsxDEV(EventInfo, {\n        longitude: popupInfo.longitude,\n        latitude: popupInfo.latitude,\n        properties: popupInfo.properties,\n        onClose: () => setPopupInfo(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Mapbox, \"XzthFxaIcOcpygPXPgLeLSC9Qjg=\", false, function () {\n  return [useFetch];\n});\n_c = Mapbox;\nexport default Mapbox;\nvar _c;\n$RefreshReg$(_c, \"Mapbox\");","map":{"version":3,"names":["useRef","useState","useEffect","Map","NavigationControl","Source","Layer","MAPBOX_TOKEN","GeocoderControl","clusterLayer","clusterCountLayer","unclusteredPointLayer","routeLayer","EventInfo","useFetch","Spin","jsxDEV","_jsxDEV","Fragment","_Fragment","BACKEND_SERVER","Mapbox","_s","mapRef","popupInfo","setPopupInfo","mapLoadingRef","data","routeData","loading","routeLoading","error","routeFetchError","routeGeojson","current","console","log","success","onClick","event","feature","features","layer","id","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","duration","slice","longitude","latitude","children","tip","size","className","fileName","_jsxFileName","lineNumber","columnNumber","initialViewState","mapboxAccessToken","style","position","width","top","bottom","mapStyle","ref","interactiveLayerIds","type","cluster","clusterMaxZoom","clusterRadius","onClose","_c","$RefreshReg$"],"sources":["/Users/ywang/Desktop/fiber_monitor_display/frontend/src/components/Map/Map.js"],"sourcesContent":["import \"./Map.css\";\nimport { useRef, useState, useEffect } from 'react';\nimport Map, { NavigationControl, Source, Layer } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from './Const'\nimport GeocoderControl from './GeocoderControl';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer, routeLayer } from './layers';\nimport EventInfo from \"./EventInfo\";\nimport useFetch from \"../Api/Api\"\nimport { Spin } from 'antd';\n\n\nconst BACKEND_SERVER = \"http://localhost:5000/\"\n\nfunction Mapbox() {\n  const mapRef = useRef(null);\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  const mapLoadingRef = useRef(true)\n\n  const {data: routeData, loading: routeLoading, error: routeFetchError} = useFetch(BACKEND_SERVER + 'routes')\n  const routeGeojson = useRef(null);\n  // if (!routeLoading) {\n  //   console.log('load complete')\n  //   console.log(routeData)\n  //   if (routeData.success) {\n  //     routeGeojson.current = routeData.res.map((route) => {\n  //       return {\n  //         \"type\": \"FeatureCollection\",\n  //         \"features\": [{\n  //           \"type\": \"Feature\",\n  //           \"properties\": {\n  //             \"name\": route.name,\n  //           },\n  //           \"geometry\": route.geometry\n  //         }]\n  //       }\n  //     })\n  //   }\n  // }\n\n  useEffect(() => {\n    mapLoadingRef.current = routeLoading\n    if (!routeLoading) {\n      console.log('load complete')\n      console.log(routeData)\n      console.log(routeData.success)\n      // if (routeData.success) {\n      //   routeGeojson.current = routeData.res.map((route) => {\n      //     return {\n      //       \"type\": \"FeatureCollection\",\n      //       \"features\": [{\n      //         \"type\": \"Feature\",\n      //         \"properties\": {\n      //           \"name\": route.name,\n      //         },\n      //         \"geometry\": route.geometry\n      //       }]\n      //     }\n      //   })\n      // }\n    }\n  }, [routeLoading, routeData])\n\n  const onClick = event => {\n    const feature = event.features[0];\n    if (!feature) {\n      return\n    }\n    if (feature.layer.id === 'clusters') {\n      const clusterId = feature.properties.cluster_id;\n      mapRef.current.getSource('event').getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n        mapRef.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom,\n          duration: 500\n        });\n      });\n    }\n    if (feature.layer.id === 'unclustered-point') {\n      console.log('point:', feature)\n      const coordinates = feature.geometry.coordinates.slice();\n      setPopupInfo({\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        properties: feature.properties\n      });\n    }\n  };\n\n  return (\n    <>\n      {mapLoadingRef.current && \n        <Spin tip=\"Loading\" size=\"large\" className=\"spin\"/>\n      }\n      {!mapLoadingRef.current && \n        <Map\n          initialViewState={{\n            longitude: -74.6,\n            latitude: 40.4,\n            zoom: 10,\n          }}\n          mapboxAccessToken={MAPBOX_TOKEN}\n          style={{ position: \"absolute\", width: \"100%\", top: 0, bottom: 0 }}\n          mapStyle=\"mapbox://styles/mapbox/streets-v12\"\n          onClick={onClick}\n          ref={mapRef}\n          interactiveLayerIds={[clusterLayer.id, unclusteredPointLayer.id]}\n        >\n          <NavigationControl position=\"top-left\" />\n          <GeocoderControl position=\"top-right\" />\n          <Source\n            id=\"event\"\n            type=\"geojson\"\n            // data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n            data = \"./data/sample.geojson\"\n            cluster={true}\n            clusterMaxZoom={14}\n            clusterRadius={50}\n          >\n            <Layer {...clusterLayer} />\n            <Layer {...clusterCountLayer} />\n            <Layer {...unclusteredPointLayer} />\n          </Source>\n          <Source\n            id=\"route\"\n            type=\"geojson\"\n            data={ routeGeojson }\n            // data=\"./data/route.geojson\"\n          >\n            <Layer {...routeLayer}/>\n          </Source>\n          {popupInfo && (\n            <EventInfo\n              longitude={popupInfo.longitude}\n              latitude={popupInfo.latitude}\n              properties={popupInfo.properties}\n              onClose={() => setPopupInfo(null)}\n            />\n          ) \n          }\n        </Map>\n      }\n    </>\n  );\n}\n\nexport default Mapbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}