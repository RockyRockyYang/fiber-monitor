{"ast":null,"code":"var _jsxFileName = \"/Users/ywang/Desktop/fiber_monitor_display/frontend/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport \"./Map.css\";\nimport { useRef, useState, useEffect } from 'react';\nimport Map, { NavigationControl, Source, Layer } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from './Const';\nimport GeocoderControl from './GeocoderControl';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer, routeLayer } from './layers';\nimport EventInfo from \"./EventInfo\";\nimport useFetch from \"../Api/Api\";\nimport { Spin } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BACKEND_SERVER = \"http://localhost:5000/\";\nfunction Mapbox() {\n  _s();\n  const mapRef = useRef(null);\n  const [popupInfo, setPopupInfo] = useState(null);\n  const routeLoading = true;\n  const mapLoadingRef = useRef(true);\n  useEffect(() => {\n    mapLoadingRef.current = routeLoading;\n  }, [routeLoading]);\n  // const {data: routeData, loading: routeLoading, error: routeFetchError} = useFetch(BACKEND_SERVER + 'routes')\n  // if (!routeLoading) {\n  //   console.log('still loading:', routeData)\n  // } else {\n  //   console.log('load complete')\n  // }\n\n  const onClick = event => {\n    const feature = event.features[0];\n    if (!feature) {\n      return;\n    }\n    if (feature.layer.id === 'clusters') {\n      const clusterId = feature.properties.cluster_id;\n      mapRef.current.getSource('event').getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n        mapRef.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom,\n          duration: 500\n        });\n      });\n    }\n    if (feature.layer.id === 'unclustered-point') {\n      console.log('point:', feature);\n      const coordinates = feature.geometry.coordinates.slice();\n      setPopupInfo({\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        properties: feature.properties\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [mapLoadingRef.current && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        tip: \"Loading\",\n        size: \"large\",\n        className: \"spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), !mapLoadingRef.current && /*#__PURE__*/_jsxDEV(Map, {\n      initialViewState: {\n        longitude: -74.6,\n        latitude: 40.4,\n        zoom: 10\n      },\n      mapboxAccessToken: MAPBOX_TOKEN,\n      style: {\n        position: \"absolute\",\n        width: \"100%\",\n        top: 0,\n        bottom: 0\n      },\n      mapStyle: \"mapbox://styles/mapbox/streets-v12\",\n      onClick: onClick,\n      ref: mapRef,\n      interactiveLayerIds: [clusterLayer.id, unclusteredPointLayer.id],\n      children: [/*#__PURE__*/_jsxDEV(NavigationControl, {\n        position: \"top-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GeocoderControl, {\n        position: \"top-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"event\",\n        type: \"geojson\"\n        // data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n        ,\n        data: \"./data/sample.geojson\",\n        cluster: true,\n        clusterMaxZoom: 14,\n        clusterRadius: 50,\n        children: [/*#__PURE__*/_jsxDEV(Layer, {\n          ...clusterLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          ...clusterCountLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          ...unclusteredPointLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"route\",\n        type: \"geojson\",\n        data: \"./data/route.geojson\",\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          ...routeLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), popupInfo && /*#__PURE__*/_jsxDEV(EventInfo, {\n        longitude: popupInfo.longitude,\n        latitude: popupInfo.latitude,\n        properties: popupInfo.properties,\n        onClose: () => setPopupInfo(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Mapbox, \"pbrVfDOyKGqWne1wAX6A+3p37gk=\");\n_c = Mapbox;\nexport default Mapbox;\nvar _c;\n$RefreshReg$(_c, \"Mapbox\");","map":{"version":3,"names":["useRef","useState","useEffect","Map","NavigationControl","Source","Layer","MAPBOX_TOKEN","GeocoderControl","clusterLayer","clusterCountLayer","unclusteredPointLayer","routeLayer","EventInfo","useFetch","Spin","jsxDEV","_jsxDEV","Fragment","_Fragment","BACKEND_SERVER","Mapbox","_s","mapRef","popupInfo","setPopupInfo","routeLoading","mapLoadingRef","current","onClick","event","feature","features","layer","id","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","duration","console","log","slice","longitude","latitude","children","tip","size","className","fileName","_jsxFileName","lineNumber","columnNumber","initialViewState","mapboxAccessToken","style","position","width","top","bottom","mapStyle","ref","interactiveLayerIds","type","data","cluster","clusterMaxZoom","clusterRadius","onClose","_c","$RefreshReg$"],"sources":["/Users/ywang/Desktop/fiber_monitor_display/frontend/src/components/Map/Map.js"],"sourcesContent":["import \"./Map.css\";\nimport { useRef, useState, useEffect } from 'react';\nimport Map, { NavigationControl, Source, Layer } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from './Const'\nimport GeocoderControl from './GeocoderControl';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer, routeLayer } from './layers';\nimport EventInfo from \"./EventInfo\";\nimport useFetch from \"../Api/Api\"\nimport { Spin } from 'antd';\n\n\nconst BACKEND_SERVER = \"http://localhost:5000/\"\n\nfunction Mapbox() {\n  const mapRef = useRef(null);\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  const routeLoading = true\n  const mapLoadingRef = useRef(true)\n  useEffect(() => {\n    mapLoadingRef.current = routeLoading\n  }, [routeLoading])\n  // const {data: routeData, loading: routeLoading, error: routeFetchError} = useFetch(BACKEND_SERVER + 'routes')\n  // if (!routeLoading) {\n  //   console.log('still loading:', routeData)\n  // } else {\n  //   console.log('load complete')\n  // }\n\n  const onClick = event => {\n    const feature = event.features[0];\n    if (!feature) {\n      return\n    }\n    if (feature.layer.id === 'clusters') {\n      const clusterId = feature.properties.cluster_id;\n      mapRef.current.getSource('event').getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n        mapRef.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom,\n          duration: 500\n        });\n      });\n    }\n    if (feature.layer.id === 'unclustered-point') {\n      console.log('point:', feature)\n      const coordinates = feature.geometry.coordinates.slice();\n      setPopupInfo({\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        properties: feature.properties\n      });\n    }\n  };\n\n  return (\n    <>\n      {mapLoadingRef.current && \n        <div>\n          <Spin tip=\"Loading\" size=\"large\" className=\"spin\"/>\n        </div>\n      }\n      {!mapLoadingRef.current && \n        <Map\n          initialViewState={{\n            longitude: -74.6,\n            latitude: 40.4,\n            zoom: 10,\n          }}\n          mapboxAccessToken={MAPBOX_TOKEN}\n          style={{ position: \"absolute\", width: \"100%\", top: 0, bottom: 0 }}\n          mapStyle=\"mapbox://styles/mapbox/streets-v12\"\n          onClick={onClick}\n          ref={mapRef}\n          interactiveLayerIds={[clusterLayer.id, unclusteredPointLayer.id]}\n        >\n          <NavigationControl position=\"top-left\" />\n          <GeocoderControl position=\"top-right\" />\n          <Source\n            id=\"event\"\n            type=\"geojson\"\n            // data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n            data = \"./data/sample.geojson\"\n            cluster={true}\n            clusterMaxZoom={14}\n            clusterRadius={50}\n          >\n            <Layer {...clusterLayer} />\n            <Layer {...clusterCountLayer} />\n            <Layer {...unclusteredPointLayer} />\n          </Source>\n          <Source\n            id=\"route\"\n            type=\"geojson\"\n            data=\"./data/route.geojson\"\n          >\n            <Layer {...routeLayer}/>\n          </Source>\n          {popupInfo && (\n            <EventInfo\n              longitude={popupInfo.longitude}\n              latitude={popupInfo.latitude}\n              properties={popupInfo.properties}\n              onClose={() => setPopupInfo(null)}\n            />\n          ) \n          }\n        </Map>\n      }\n    </>\n  );\n}\n\nexport default Mapbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}