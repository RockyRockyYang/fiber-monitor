{"ast":null,"code":"var _jsxFileName = \"/Users/ywang/Desktop/fiber_monitor_display/frontend/src/components/Map/Map.js\",\n  _s = $RefreshSig$();\nimport \"./Map.css\";\nimport { useRef, useState, useEffect, useContext } from 'react';\nimport Map, { NavigationControl, Source, Layer } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from './MapboxConst';\nimport GeocoderControl from './GeocoderControl';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer, routeLayer } from './layers';\nimport EventInfo from \"./EventInfo\";\n// import useFetch from \"../../Api/Api\"\nimport { Spin } from 'antd';\nimport { EventsContext } from '../../store/events-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Mapbox() {\n  _s();\n  const mapRef = useRef(null);\n  const [popupInfo, setPopupInfo] = useState(null);\n  const eventsCtx = useContext(EventsContext);\n  useEffect(() => {\n    console.log(\"??\", eventsCtx.events);\n    if (eventsCtx.events) {\n      console.log(\"hii\", eventsCtx.events);\n    }\n  }, [eventsCtx]);\n  // const {data: routeData, loading: routeLoading, } = useFetch(BACKEND_SERVER + 'routes')\n  // const routeGeojsonRef = useRef(null);\n  // const [routeGeojsonReady, setRouteGeojsonReady] = useState(false)\n  // useEffect(() => {\n  //   if (!routeLoading) {\n  //     if (routeData.success) {\n  //       routeGeojsonRef.current = routeData.res.map((route) => {\n  //         return {\n  //           \"type\": \"FeatureCollection\",\n  //           \"features\": [{\n  //             \"type\": \"Feature\",\n  //             \"properties\": {\n  //               \"name\": route.name,\n  //             },\n  //             \"geometry\": route.geometry\n  //           }]\n  //         }\n  //       })[0]   // might change if multiple route applies\n  //     }\n  //     setRouteGeojsonReady(true)\n  //   }\n  // }, [routeLoading, routeData])\n\n  // const {data: eventData, loading: eventLoading, } = useFetch(BACKEND_SERVER + 'events')\n  // const eventGeojsonRef = useRef(null);\n  // const [eventGeojsonReady, setEventGeojsonReady] = useState(false)\n  // useEffect(() => {\n  //   if (!eventLoading) {\n  //     if (eventData.success) {\n  //       eventGeojsonRef.current = {\n  //         \"type\": \"FeatureCollection\",\n  //         \"features\": eventData.res.map((event) => {\n  //           return {\n  //             \"type\": \"Feature\",\n  //             \"properties\": {\n  //               \"event_id\": event.event_id,\n  //               \"time\": event.time,\n  //               \"Port\": event.port,\n  //               \"event_type\": event.event_type,\n  //               \"from\": event.start,\n  //               \"to\": event.end,\n  //               \"unit\": event.unit,\n  //               \"duration\": event.duration\n  //             },\n  //             \"geometry\": event.geometry\n  //           }\n  //         })\n  //       }\n  //       setEventGeojsonReady(true)\n  //     }\n  //   }\n  // }, [eventLoading, eventData])\n\n  const [mapLoading, setMapLoading] = useState(true);\n  // useEffect(() => {\n  //   if (routeGeojsonReady && eventGeojsonReady) {\n  //     setMapLoading(false)\n  //   }\n  // }, [routeGeojsonReady, eventGeojsonReady]) \n\n  const onClick = event => {\n    const feature = event.features[0];\n    if (!feature) {\n      return;\n    }\n    if (feature.layer.id === 'clusters') {\n      const clusterId = feature.properties.cluster_id;\n      mapRef.current.getSource('event').getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n        mapRef.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom,\n          duration: 500\n        });\n      });\n    }\n    if (feature.layer.id === 'unclustered-point') {\n      console.log('point:', feature);\n      const coordinates = feature.geometry.coordinates.slice();\n      setPopupInfo({\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        properties: feature.properties\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [mapLoading && /*#__PURE__*/_jsxDEV(Spin, {\n      tip: \"Loading\",\n      size: \"large\",\n      className: \"spin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), !mapLoading && /*#__PURE__*/_jsxDEV(Map, {\n      initialViewState: {\n        longitude: -74.6,\n        latitude: 40.4,\n        zoom: 10\n      },\n      mapboxAccessToken: MAPBOX_TOKEN,\n      style: {\n        position: \"absolute\",\n        width: \"100%\",\n        top: \"0\",\n        bottom: \"0\"\n      },\n      mapStyle: \"mapbox://styles/mapbox/streets-v12\",\n      onClick: onClick,\n      ref: mapRef,\n      interactiveLayerIds: [clusterLayer.id, unclusteredPointLayer.id],\n      children: [/*#__PURE__*/_jsxDEV(NavigationControl, {\n        position: \"top-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GeocoderControl, {\n        position: \"top-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"route\",\n        type: \"geojson\"\n        // data={ routeGeojsonRef.current }\n        // data=\"./data/route.geojson\"\n        ,\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          ...routeLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Source, {\n        id: \"event\",\n        type: \"geojson\"\n        // data = {eventGeojsonRef.current}\n        // data = \"./data/sample.geojson\"\n        ,\n        cluster: true,\n        clusterMaxZoom: 14,\n        clusterRadius: 50,\n        children: [/*#__PURE__*/_jsxDEV(Layer, {\n          ...clusterLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          ...clusterCountLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          ...unclusteredPointLayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), popupInfo && /*#__PURE__*/_jsxDEV(EventInfo, {\n        longitude: popupInfo.longitude,\n        latitude: popupInfo.latitude,\n        properties: popupInfo.properties,\n        onClose: () => setPopupInfo(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Mapbox, \"ery0yxUQqbLDeVZGX/88FUL/F1M=\");\n_c = Mapbox;\nexport default Mapbox;\nvar _c;\n$RefreshReg$(_c, \"Mapbox\");","map":{"version":3,"names":["useRef","useState","useEffect","useContext","Map","NavigationControl","Source","Layer","MAPBOX_TOKEN","GeocoderControl","clusterLayer","clusterCountLayer","unclusteredPointLayer","routeLayer","EventInfo","Spin","EventsContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Mapbox","_s","mapRef","popupInfo","setPopupInfo","eventsCtx","console","log","events","mapLoading","setMapLoading","onClick","event","feature","features","layer","id","clusterId","properties","cluster_id","current","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","duration","slice","longitude","latitude","children","tip","size","className","fileName","_jsxFileName","lineNumber","columnNumber","initialViewState","mapboxAccessToken","style","position","width","top","bottom","mapStyle","ref","interactiveLayerIds","type","cluster","clusterMaxZoom","clusterRadius","onClose","_c","$RefreshReg$"],"sources":["/Users/ywang/Desktop/fiber_monitor_display/frontend/src/components/Map/Map.js"],"sourcesContent":["import \"./Map.css\";\nimport { useRef, useState, useEffect, useContext } from 'react';\nimport Map, { NavigationControl, Source, Layer } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from './MapboxConst'\nimport GeocoderControl from './GeocoderControl';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer, routeLayer } from './layers';\nimport EventInfo from \"./EventInfo\";\n// import useFetch from \"../../Api/Api\"\nimport { Spin } from 'antd';\nimport { EventsContext } from '../../store/events-context'\n\nfunction Mapbox() {\n  const mapRef = useRef(null);\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  const eventsCtx = useContext(EventsContext)\n  useEffect(() => {\n    console.log(\"??\", eventsCtx.events)\n    if (eventsCtx.events) {\n      console.log(\"hii\", eventsCtx.events)\n    }\n  }, [eventsCtx])\n  // const {data: routeData, loading: routeLoading, } = useFetch(BACKEND_SERVER + 'routes')\n  // const routeGeojsonRef = useRef(null);\n  // const [routeGeojsonReady, setRouteGeojsonReady] = useState(false)\n  // useEffect(() => {\n  //   if (!routeLoading) {\n  //     if (routeData.success) {\n  //       routeGeojsonRef.current = routeData.res.map((route) => {\n  //         return {\n  //           \"type\": \"FeatureCollection\",\n  //           \"features\": [{\n  //             \"type\": \"Feature\",\n  //             \"properties\": {\n  //               \"name\": route.name,\n  //             },\n  //             \"geometry\": route.geometry\n  //           }]\n  //         }\n  //       })[0]   // might change if multiple route applies\n  //     }\n  //     setRouteGeojsonReady(true)\n  //   }\n  // }, [routeLoading, routeData])\n\n  // const {data: eventData, loading: eventLoading, } = useFetch(BACKEND_SERVER + 'events')\n  // const eventGeojsonRef = useRef(null);\n  // const [eventGeojsonReady, setEventGeojsonReady] = useState(false)\n  // useEffect(() => {\n  //   if (!eventLoading) {\n  //     if (eventData.success) {\n  //       eventGeojsonRef.current = {\n  //         \"type\": \"FeatureCollection\",\n  //         \"features\": eventData.res.map((event) => {\n  //           return {\n  //             \"type\": \"Feature\",\n  //             \"properties\": {\n  //               \"event_id\": event.event_id,\n  //               \"time\": event.time,\n  //               \"Port\": event.port,\n  //               \"event_type\": event.event_type,\n  //               \"from\": event.start,\n  //               \"to\": event.end,\n  //               \"unit\": event.unit,\n  //               \"duration\": event.duration\n  //             },\n  //             \"geometry\": event.geometry\n  //           }\n  //         })\n  //       }\n  //       setEventGeojsonReady(true)\n  //     }\n  //   }\n  // }, [eventLoading, eventData])\n\n  const [mapLoading, setMapLoading] = useState(true)\n  // useEffect(() => {\n  //   if (routeGeojsonReady && eventGeojsonReady) {\n  //     setMapLoading(false)\n  //   }\n  // }, [routeGeojsonReady, eventGeojsonReady]) \n\n  const onClick = event => {\n    const feature = event.features[0];\n    if (!feature) {\n      return\n    }\n    if (feature.layer.id === 'clusters') {\n      const clusterId = feature.properties.cluster_id;\n      mapRef.current.getSource('event').getClusterExpansionZoom(clusterId, (err, zoom) => {\n        if (err) {\n          return;\n        }\n        mapRef.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom,\n          duration: 500\n        });\n      });\n    }\n    if (feature.layer.id === 'unclustered-point') {\n      console.log('point:', feature)\n      const coordinates = feature.geometry.coordinates.slice();\n      setPopupInfo({\n        longitude: coordinates[0],\n        latitude: coordinates[1],\n        properties: feature.properties\n      });\n    }\n  };\n\n  return (\n    <>\n      {mapLoading && \n        <Spin tip=\"Loading\" size=\"large\" className=\"spin\"/>\n      }\n      {!mapLoading && \n        <Map\n          initialViewState={{\n            longitude: -74.6,\n            latitude: 40.4,\n            zoom: 10,\n          }}\n          mapboxAccessToken={MAPBOX_TOKEN}\n          style={{position: \"absolute\", width: \"100%\", top: \"0\", bottom: \"0\"}}\n          mapStyle=\"mapbox://styles/mapbox/streets-v12\"\n          onClick={onClick}\n          ref={mapRef}\n          interactiveLayerIds={[clusterLayer.id, unclusteredPointLayer.id]}\n        >\n          <NavigationControl position=\"top-left\" />\n          <GeocoderControl position=\"top-right\" />\n          <Source\n            id=\"route\"\n            type=\"geojson\"\n            // data={ routeGeojsonRef.current }\n            // data=\"./data/route.geojson\"\n          >\n            <Layer {...routeLayer}/>\n          </Source>\n          <Source\n            id=\"event\"\n            type=\"geojson\"\n            // data = {eventGeojsonRef.current}\n            // data = \"./data/sample.geojson\"\n            cluster={true}\n            clusterMaxZoom={14}\n            clusterRadius={50}\n          >\n            <Layer {...clusterLayer} />\n            <Layer {...clusterCountLayer} />\n            <Layer {...unclusteredPointLayer} />\n          </Source>\n          {popupInfo && (\n            <EventInfo\n              longitude={popupInfo.longitude}\n              latitude={popupInfo.latitude}\n              properties={popupInfo.properties}\n              onClose={() => setPopupInfo(null)}\n            />\n          ) \n          }\n        </Map>\n      }\n    </>\n  );\n}\n\nexport default Mapbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}